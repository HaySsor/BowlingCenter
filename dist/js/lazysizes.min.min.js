"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){var t=function(a,f,o){var m,y,e,D={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",fastLoadedClass:"ls-is-cached",iframeLoadMode:0,srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(e in y=a.lazySizesConfig||a.lazysizesConfig||{},D)e in y||(y[e]=D[e]);if(!f||!f.getElementsByClassName)return{init:function(){},cfg:y,noSupport:!0};function c(e,t){W(e,t)||e.setAttribute("class",(e[S]("class")||"").trim()+" "+t)}function u(e,t){(t=W(e,t))&&e.setAttribute("class",(e[S]("class")||"").replace(t," "))}function k(t,n,e){var a=e?l:"removeEventListener";e&&k(t,n),ye.forEach(function(e){t[a](e,n)})}function H(e,t){var n;!ce&&(n=a.picturefill||y.pf)?(t&&t.src&&!e[S]("srcset")&&e.setAttribute("srcset",t.src),n({reevaluate:!0,elements:[e]})):t&&t.src&&(e.src=t.src)}function t(n,e){return e?function(){F(n)}:function(){var e=this,t=arguments;F(function(){n.apply(e,t)})}}function O(e){function t(){var e=o.now()-a;e<99?L(t,99-e):(fe||i)(i)}var n,a,i=function(){n=null,e()};return function(){a=o.now(),n=n||L(t,99)}}function n(){!n.i&&f.getElementsByClassName&&(n.i=!0,ge._(),he._())}var P,$,q,p,z,I,h,U,j,G,g,v,C,b,A,J,K,Q,V,i,X,Y,Z,ee,E,_,w,te,s,ne,ae,ie,M,oe,se,re,le,de,r,N=f.documentElement,ce=a.HTMLPictureElement,l="addEventListener",S="getAttribute",d=a[l].bind(a),L=a.setTimeout,ue=a.requestAnimationFrame||L,fe=a.requestIdleCallback,me=/^picture$/i,ye=["load","error","lazyincluded","_lazyloaded"],x={},pe=Array.prototype.forEach,W=function(e,t){return x[t]||(x[t]=new RegExp("(\\s|^)"+t+"(\\s|$)")),x[t].test(e[S]("class")||"")&&x[t]},B=function(e,t,n,a,i){var o=f.createEvent("Event");return(n=n||{}).instance=m,o.initEvent(t,!a,!i),o.detail=n,e.dispatchEvent(o),o},T=function(e,t){return(getComputedStyle(e,null)||{})[t]},ze=function(e,t,n){for(n=n||e.offsetWidth;n<y.minSize&&t&&!e._lazysizesWidth;)n=t.offsetWidth,t=t.parentNode;return n},F=(de=[],r=le=[],Ne._lsFlush=Me,Ne),he=(Y=/^img$/i,Z=/^iframe$/i,ee="onscroll"in a&&!/(gle|ing)bot/.test(navigator.userAgent),w=-1,te=function(e){return(A=null==A?"hidden"==T(f.body,"visibility"):A)||!("hidden"==T(e.parentNode,"visibility")&&"hidden"==T(e,"visibility"))},J=be,Q=_=E=0,V=y.throttleDelay,i=y.ricTimeout,X=fe&&49<i?function(){fe(Ae,{timeout:i}),i!==y.ricTimeout&&(i=y.ricTimeout)}:t(function(){L(Ae)},!0),ne=t(Ee),ae=function(e){ne({target:e.target})},ie=t(function(t,e,n,a,i){var o,s,r,l,d;(s=B(t,"lazybeforeunveil",e)).defaultPrevented||(a&&(n?c(t,y.autosizesClass):t.setAttribute("sizes",a)),n=t[S](y.srcsetAttr),a=t[S](y.srcAttr),i&&(o=(l=t.parentNode)&&me.test(l.nodeName||"")),r=e.firesLoad||"src"in t&&(n||a||o),s={target:t},c(t,y.loadingClass),r&&(clearTimeout(I),I=L(Ce,2500),k(t,ae,!0)),o&&pe.call(l.getElementsByTagName("source"),_e),n?t.setAttribute("srcset",n):a&&!o&&(Z.test(t.nodeName)?(e=a,0==(d=(l=t).getAttribute("data-load-mode")||y.iframeLoadMode)?l.contentWindow.location.replace(e):1==d&&(l.src=e)):t.src=a),i&&(n||o)&&H(t,{src:a})),t._lazyRace&&delete t._lazyRace,u(t,y.lazyClass),F(function(){var e=t.complete&&1<t.naturalWidth;r&&!e||(e&&c(t,y.fastLoadedClass),Ee(s),t._lazyCache=!0,L(function(){"_lazyCache"in t&&delete t._lazyCache},9)),"lazy"==t.loading&&_--},!0)}),oe=O(function(){y.loadMode=3,s()}),{_:function(){U=o.now(),m.elements=f.getElementsByClassName(y.lazyClass),p=f.getElementsByClassName(y.lazyClass+" "+y.preloadClass),d("scroll",s,!0),d("resize",s,!0),d("pageshow",function(e){var t;e.persisted&&(t=f.querySelectorAll("."+y.loadingClass)).length&&t.forEach&&ue(function(){t.forEach(function(e){e.complete&&M(e)})})}),a.MutationObserver?new MutationObserver(s).observe(N,{childList:!0,subtree:!0,attributes:!0}):(N[l]("DOMNodeInserted",s,!0),N[l]("DOMAttrModified",s,!0),setInterval(s,999)),d("hashchange",s,!0),["focus","mouseover","click","load","transitionend","animationend"].forEach(function(e){f[l](e,s,!0)}),/d$|^c/.test(f.readyState)?R():(d("load",R),f[l]("DOMContentLoaded",s),L(R,2e4)),m.elements.length?(be(),F._lsFlush()):s()},checkElems:s=function(e){var t;(e=!0===e)&&(i=33),K||(K=!0,(t=V-(o.now()-Q))<0&&(t=0),e||t<9?X():L(X,t))},unveil:M=function(e){var t,n,a,i;e._lazyRace||(!(i="auto"==(a=(n=Y.test(e.nodeName))&&(e[S](y.sizesAttr)||e[S]("sizes"))))&&z||!n||!e[S]("src")&&!e.srcset||e.complete||W(e,y.errorClass)||!W(e,y.lazyClass))&&(t=B(e,"lazyunveilread").detail,i&&ge.updateElem(e,!0,e.offsetWidth),e._lazyRace=!0,_++,ie(e,t,i,a,n))},_aLSL:we}),ge=($=t(function(e,t,n,a){var i,o,s;if(e._lazysizesWidth=a,e.setAttribute("sizes",a+="px"),me.test(t.nodeName||""))for(o=0,s=(i=t.getElementsByTagName("source")).length;o<s;o++)i[o].setAttribute("sizes",a);n.detail.dataAttr||H(e,n.detail)}),{_:function(){P=f.getElementsByClassName(y.autosizesClass),d("resize",q)},checkElems:q=O(function(){var e,t=P.length;if(t)for(e=0;e<t;e++)ve(P[e])}),updateElem:ve});function ve(e,t,n){var a=e.parentNode;a&&(n=ze(e,a,n),(t=B(e,"lazybeforesizes",{width:n,dataAttr:!!t})).defaultPrevented||(n=t.detail.width)&&n!==e._lazysizesWidth&&$(e,a,t,n))}function Ce(e){_--,e&&!(_<0)&&e.target||(_=0)}function be(){var e,t,n,a,i,o,s,r,l,d,c,u=m.elements;if((h=y.loadMode)&&_<8&&(e=u.length)){for(t=0,w++;t<e;t++)if(u[t]&&!u[t]._lazyRace)if(!ee||m.prematureUnveil&&m.prematureUnveil(u[t]))M(u[t]);else if((s=u[t][S]("data-expand"))&&(i=+s)||(i=E),l||(l=!y.expand||y.expand<1?500<N.clientHeight&&500<N.clientWidth?500:370:y.expand,d=(m._defEx=l)*y.expFactor,c=y.hFac,A=null,E<d&&_<1&&2<w&&2<h&&!f.hidden?(E=d,w=0):E=1<h&&1<w&&_<6?l:0),r!==i&&(j=innerWidth+i*c,G=innerHeight+i,o=-1*i,r=i),d=u[t].getBoundingClientRect(),(b=d.bottom)>=o&&(g=d.top)<=G&&(C=d.right)>=o*c&&(v=d.left)<=j&&(b||C||v||g)&&(y.loadHidden||te(u[t]))&&(z&&_<3&&!s&&(h<3||w<4)||function(e,t){var n,a=e,i=te(e);for(g-=t,b+=t,v-=t,C+=t;i&&(a=a.offsetParent)&&a!=f.body&&a!=N;)(i=0<(T(a,"opacity")||1))&&"visible"!=T(a,"overflow")&&(n=a.getBoundingClientRect(),i=C>n.left&&v<n.right&&b>n.top-1&&g<n.bottom+1);return i}(u[t],i))){if(M(u[t]),a=!0,9<_)break}else!a&&z&&!n&&_<4&&w<4&&2<h&&(p[0]||y.preloadAfterLoad)&&(p[0]||!s&&(b||C||v||g||"auto"!=u[t][S](y.sizesAttr)))&&(n=p[0]||u[t]);n&&!a&&M(n)}}function Ae(){K=!1,Q=o.now(),J()}function Ee(e){var t=e.target;t._lazyCache?delete t._lazyCache:(Ce(e),c(t,y.loadedClass),u(t,y.loadingClass),k(t,ae),B(t,"lazyloaded"))}function _e(e){var t,n=e[S](y.srcsetAttr);(t=y.customMedia[e[S]("data-media")||e[S]("media")])&&e.setAttribute("media",t),n&&e.setAttribute("srcset",n)}function we(){3==y.loadMode&&(y.loadMode=2),oe()}function R(){z||(o.now()-U<999?L(R,999):(z=!0,y.loadMode=3,s(),d("scroll",we,!0)))}function Me(){var e=r;for(r=le.length?de:le,re=!(se=!0);e.length;)e.shift()();se=!1}function Ne(e,t){se&&!t?e.apply(this,arguments):(r.push(e),re||(re=!0,(f.hidden?L:ue)(Me)))}return L(function(){y.init&&n()}),m={cfg:y,autoSizer:ge,loader:he,init:n,uP:H,aC:c,rC:u,hC:W,fire:B,gW:ze,rAF:F}}(e,e.document,Date);e.lazySizes=t,"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module.exports&&(module.exports=t)}("undefined"!=typeof window?window:{});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhenlzaXplcy5taW4uanMiXSwibmFtZXMiOlsiZSIsInQiLCJ1IiwiRCIsImYiLCJrIiwiSCIsImxhenlDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwicHJlbG9hZENsYXNzIiwiZXJyb3JDbGFzcyIsImF1dG9zaXplc0NsYXNzIiwiZmFzdExvYWRlZENsYXNzIiwiaWZyYW1lTG9hZE1vZGUiLCJzcmNBdHRyIiwic3Jjc2V0QXR0ciIsInNpemVzQXR0ciIsIm1pblNpemUiLCJjdXN0b21NZWRpYSIsImluaXQiLCJleHBGYWN0b3IiLCJoRmFjIiwicmljVGltZW91dCIsImxvYWRIaWRkZW4iLCJsYXp5c2l6ZXNDb25maWciLCJ0aHJvdHRsZURlbGF5IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNmZyIsIm5vU3VwcG9ydCIsIksiLCJKIiwiQXJyYXkiLCJzZXRBdHRyaWJ1dGUiLCIkIiwidHJpbSIsIlEiLCJhIiwidGVzdCIsInJlcGxhY2UiLCJpIiwiUCIsIlYiLCJyIiwiZm9yRWFjaCIsIlkiLCJYIiwiY3JlYXRlRXZlbnQiLCJwZiIsInNyYyIsInJlZXZhbHVhdGUiLCJlbGVtZW50cyIsImluc3RhbmNlIiwibiIsImxlbmd0aCIsImVlIiwidGhpcyIsImFyZ3VtZW50cyIsImFwcGx5IiwiaWUiLCJub3ciLCJJIiwibyIsInJlIiwiXyIsInYiLCJtIiwiYyIsImgiLCJ5IiwieiIsImciLCJwIiwiQyIsImIiLCJBIiwicyIsIkUiLCJ3IiwiTSIsIk4iLCJCIiwidGFyZ2V0IiwiTyIsImRvY3VtZW50RWxlbWVudCIsIkhUTUxQaWN0dXJlRWxlbWVudCIsInNldFRpbWVvdXQiLCJVIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImoiLCJHIiwicHJvdG90eXBlIiwiYmluZCIsImluaXRFdmVudCIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwib2Zmc2V0V2lkdGgiLCJfbGF6eXNpemVzV2lkdGgiLCJwYXJlbnROb2RlIiwiX2xzRmx1c2giLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJaIiwiYm9keSIsInRpbWVvdXQiLCJ0ZSIsIlMiLCJsIiwiZGVmYXVsdFByZXZlbnRlZCIsImZpcmVzTG9hZCIsImNsZWFyVGltZW91dCIsIkwiLCJjb250ZW50V2luZG93IiwiY2FsbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiRiIsImQiLCJub2RlTmFtZSIsImdldEF0dHJpYnV0ZSIsImxvY2F0aW9uIiwiX2xhenlSYWNlIiwiY29tcGxldGUiLCJuYXR1cmFsV2lkdGgiLCJfbGF6eUNhY2hlIiwibG9hZE1vZGUiLCJxIiwicGVyc2lzdGVkIiwicXVlcnlTZWxlY3RvckFsbCIsIlIiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImF0dHJpYnV0ZXMiLCJyZWFkeVN0YXRlIiwiY2hlY2tFbGVtcyIsIlQiLCJkYXRhQXR0ciIsInNldEludGVydmFsIiwidXBkYXRlRWxlbSIsIndpZHRoIiwicHJlbWF0dXJlVW52ZWlsIiwiZXhwYW5kIiwiY2xpZW50SGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJfZGVmRXgiLCJoaWRkZW4iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJib3R0b20iLCJ0b3AiLCJyaWdodCIsImxlZnQiLCJ4Iiwib2Zmc2V0UGFyZW50IiwiVyIsInByZWxvYWRBZnRlckxvYWQiLCJhZSIsInB1c2giLCJ1bnZlaWwiLCJfYUxTTCIsImF1dG9TaXplciIsImxvYWRlciIsImhDIiwiZmlyZSIsInJBRiIsImRvY3VtZW50IiwiRGF0ZSIsImxhenlTaXplcyIsIm1vZHVsZSIsIl90eXBlb2YiLCJleHBvcnRzIiwid2luZG93Il0sIm1hcHBpbmdzIjoiK1BBRUUsU0FBVUEsR0FDWCxJQUFJQyxFQUFLLFNBQVVDLEVBQUdDLEVBQUdDLEdBRHhCLElBQUFDLEVBQUFDLEVBTU1OLEVBSEZLLEVB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QixFQUFBQSxFQUFBQSxNQUVEOEUsR0FBQUEsRUFDQTNHLEVBQUFBLFNBQUU0SCxFQUNGaEUsSUFDQ2tFLEVBQUEsU0FBQWpFLElBQUksS0ExVUxiLFNBQUZqRCxLQUNBLElBQUFBLEVBQUFxRCxFQTFESCxJQUFBQSxFQUFBcEQsR0FBQXFELE9BQUFYLEdBQUExQyxHQTZERXVDLEtBN0RGSCxJQTRERSxHQTVERnJDLEVBQUFzRCxRQUFBdEQsRUErREM0RSxPQS9ERDVFLEdBb0ZHcUMsSUFBSSxFQWxCQXBDLFNBQUpvQyxHQUFNNkQsRUFBTmpHLEdBQ0NvQyxLQUFLK0QsRUFDTnBHLEVBQUEwRCxNQUFBRixLQUFBQyxZQUNESixFQUFBMkcsS0FBTzNILEdBckVURyxLQUFBQSxJQXVFRyxHQUNEckMsRUFBSWtDLE9BQUp3QixFQUFBMEIsSUFBQVgsTUErYUM0RCxPQUNBeUIsRUFBQUEsV0FDQUMsRUFBQUEsTUFBS2pLLE1BRU5JLEVBM2ZGLENBQUF1QixJQTRmQ21DLEVBQ0NvRyxVQUFBcEcsR0FDQXFHLE9BQUtwSyxHQUNKb0IsS0FBQW5CLEVBQ0FELEdBQUFBLEVBQ0F3QyxHQUFBQSxFQUNBeEMsR0FBQUEsRUFnRURxSyxHQUFJdEksRUEvREh1SSxLQUFBeEgsRUFDQ0gsR0FBQUEsR0FpRUY0SCxJQUFLaEgsR0E1bUJDLENBOGlCSHZELEVBQUFBLEVBQUF3SyxTQUFBQyxNQUNEekssRUFBQTBLLFVBQUF6SyxFQWtFSixXQUFBLG9CQUFtQjBLLE9BQW5CLFlBQUFDLFFBQW1CRCxVQUFVQSxPQUFPRSxVQUFZRixPQUFPRSxRQUFVNUssR0FsbkJqRSxDQWlqQkcsb0JBQWN5SSxPQUFVb0MsT0FBQSIsImZpbGUiOiJsYXp5c2l6ZXMubWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBsYXp5c2l6ZXMgLSB2NS4zLjIgKi9cclxuXHJcbiEoZnVuY3Rpb24gKGUpIHtcclxuXHR2YXIgdCA9IChmdW5jdGlvbiAodSwgRCwgZikge1xyXG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0XHR2YXIgaywgSDtcclxuXHRcdGlmIChcclxuXHRcdFx0KChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dmFyIGU7XHJcblx0XHRcdFx0dmFyIHQgPSB7XHJcblx0XHRcdFx0XHRsYXp5Q2xhc3M6IFwibGF6eWxvYWRcIixcclxuXHRcdFx0XHRcdGxvYWRlZENsYXNzOiBcImxhenlsb2FkZWRcIixcclxuXHRcdFx0XHRcdGxvYWRpbmdDbGFzczogXCJsYXp5bG9hZGluZ1wiLFxyXG5cdFx0XHRcdFx0cHJlbG9hZENsYXNzOiBcImxhenlwcmVsb2FkXCIsXHJcblx0XHRcdFx0XHRlcnJvckNsYXNzOiBcImxhenllcnJvclwiLFxyXG5cdFx0XHRcdFx0YXV0b3NpemVzQ2xhc3M6IFwibGF6eWF1dG9zaXplc1wiLFxyXG5cdFx0XHRcdFx0ZmFzdExvYWRlZENsYXNzOiBcImxzLWlzLWNhY2hlZFwiLFxyXG5cdFx0XHRcdFx0aWZyYW1lTG9hZE1vZGU6IDAsXHJcblx0XHRcdFx0XHRzcmNBdHRyOiBcImRhdGEtc3JjXCIsXHJcblx0XHRcdFx0XHRzcmNzZXRBdHRyOiBcImRhdGEtc3Jjc2V0XCIsXHJcblx0XHRcdFx0XHRzaXplc0F0dHI6IFwiZGF0YS1zaXplc1wiLFxyXG5cdFx0XHRcdFx0bWluU2l6ZTogNDAsXHJcblx0XHRcdFx0XHRjdXN0b21NZWRpYToge30sXHJcblx0XHRcdFx0XHRpbml0OiB0cnVlLFxyXG5cdFx0XHRcdFx0ZXhwRmFjdG9yOiAxLjUsXHJcblx0XHRcdFx0XHRoRmFjOiAwLjgsXHJcblx0XHRcdFx0XHRsb2FkTW9kZTogMixcclxuXHRcdFx0XHRcdGxvYWRIaWRkZW46IHRydWUsXHJcblx0XHRcdFx0XHRyaWNUaW1lb3V0OiAwLFxyXG5cdFx0XHRcdFx0dGhyb3R0bGVEZWxheTogMTI1LFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0SCA9IHUubGF6eVNpemVzQ29uZmlnIHx8IHUubGF6eXNpemVzQ29uZmlnIHx8IHt9O1xyXG5cdFx0XHRcdGZvciAoZSBpbiB0KSB7XHJcblx0XHRcdFx0XHRpZiAoIShlIGluIEgpKSB7XHJcblx0XHRcdFx0XHRcdEhbZV0gPSB0W2VdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSkoKSxcclxuXHRcdFx0IUQgfHwgIUQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSlcclxuXHRcdCkge1xyXG5cdFx0XHRyZXR1cm4geyBpbml0OiBmdW5jdGlvbiAoKSB7fSwgY2ZnOiBILCBub1N1cHBvcnQ6IHRydWUgfTtcclxuXHRcdH1cclxuXHRcdHZhciBPID0gRC5kb2N1bWVudEVsZW1lbnQsXHJcblx0XHRcdGkgPSB1LkhUTUxQaWN0dXJlRWxlbWVudCxcclxuXHRcdFx0UCA9IFwiYWRkRXZlbnRMaXN0ZW5lclwiLFxyXG5cdFx0XHQkID0gXCJnZXRBdHRyaWJ1dGVcIixcclxuXHRcdFx0cSA9IHVbUF0uYmluZCh1KSxcclxuXHRcdFx0SSA9IHUuc2V0VGltZW91dCxcclxuXHRcdFx0VSA9IHUucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IEksXHJcblx0XHRcdG8gPSB1LnJlcXVlc3RJZGxlQ2FsbGJhY2ssXHJcblx0XHRcdGogPSAvXnBpY3R1cmUkL2ksXHJcblx0XHRcdHIgPSBbXCJsb2FkXCIsIFwiZXJyb3JcIiwgXCJsYXp5aW5jbHVkZWRcIiwgXCJfbGF6eWxvYWRlZFwiXSxcclxuXHRcdFx0YSA9IHt9LFxyXG5cdFx0XHRHID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2gsXHJcblx0XHRcdEogPSBmdW5jdGlvbiAoZSwgdCkge1xyXG5cdFx0XHRcdGlmICghYVt0XSkge1xyXG5cdFx0XHRcdFx0YVt0XSA9IG5ldyBSZWdFeHAoXCIoXFxcXHN8XilcIiArIHQgKyBcIihcXFxcc3wkKVwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGFbdF0udGVzdChlWyRdKFwiY2xhc3NcIikgfHwgXCJcIikgJiYgYVt0XTtcclxuXHRcdFx0fSxcclxuXHRcdFx0SyA9IGZ1bmN0aW9uIChlLCB0KSB7XHJcblx0XHRcdFx0aWYgKCFKKGUsIHQpKSB7XHJcblx0XHRcdFx0XHRlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIChlWyRdKFwiY2xhc3NcIikgfHwgXCJcIikudHJpbSgpICsgXCIgXCIgKyB0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdFEgPSBmdW5jdGlvbiAoZSwgdCkge1xyXG5cdFx0XHRcdHZhciBhO1xyXG5cdFx0XHRcdGlmICgoYSA9IEooZSwgdCkpKSB7XHJcblx0XHRcdFx0XHRlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIChlWyRdKFwiY2xhc3NcIikgfHwgXCJcIikucmVwbGFjZShhLCBcIiBcIikpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0ViA9IGZ1bmN0aW9uICh0LCBhLCBlKSB7XHJcblx0XHRcdFx0dmFyIGkgPSBlID8gUCA6IFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiO1xyXG5cdFx0XHRcdGlmIChlKSB7XHJcblx0XHRcdFx0XHRWKHQsIGEpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRcdHRbaV0oZSwgYSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblx0XHRcdFggPSBmdW5jdGlvbiAoZSwgdCwgYSwgaSwgcikge1xyXG5cdFx0XHRcdHZhciBuID0gRC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xyXG5cdFx0XHRcdGlmICghYSkge1xyXG5cdFx0XHRcdFx0YSA9IHt9O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRhLmluc3RhbmNlID0gaztcclxuXHRcdFx0XHRuLmluaXRFdmVudCh0LCAhaSwgIXIpO1xyXG5cdFx0XHRcdG4uZGV0YWlsID0gYTtcclxuXHRcdFx0XHRlLmRpc3BhdGNoRXZlbnQobik7XHJcblx0XHRcdFx0cmV0dXJuIG47XHJcblx0XHRcdH0sXHJcblx0XHRcdFkgPSBmdW5jdGlvbiAoZSwgdCkge1xyXG5cdFx0XHRcdHZhciBhO1xyXG5cdFx0XHRcdGlmICghaSAmJiAoYSA9IHUucGljdHVyZWZpbGwgfHwgSC5wZikpIHtcclxuXHRcdFx0XHRcdGlmICh0ICYmIHQuc3JjICYmICFlWyRdKFwic3Jjc2V0XCIpKSB7XHJcblx0XHRcdFx0XHRcdGUuc2V0QXR0cmlidXRlKFwic3Jjc2V0XCIsIHQuc3JjKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGEoeyByZWV2YWx1YXRlOiB0cnVlLCBlbGVtZW50czogW2VdIH0pO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAodCAmJiB0LnNyYykge1xyXG5cdFx0XHRcdFx0ZS5zcmMgPSB0LnNyYztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdFogPSBmdW5jdGlvbiAoZSwgdCkge1xyXG5cdFx0XHRcdHJldHVybiAoZ2V0Q29tcHV0ZWRTdHlsZShlLCBudWxsKSB8fCB7fSlbdF07XHJcblx0XHRcdH0sXHJcblx0XHRcdHMgPSBmdW5jdGlvbiAoZSwgdCwgYSkge1xyXG5cdFx0XHRcdGEgPSBhIHx8IGUub2Zmc2V0V2lkdGg7XHJcblx0XHRcdFx0d2hpbGUgKGEgPCBILm1pblNpemUgJiYgdCAmJiAhZS5fbGF6eXNpemVzV2lkdGgpIHtcclxuXHRcdFx0XHRcdGEgPSB0Lm9mZnNldFdpZHRoO1xyXG5cdFx0XHRcdFx0dCA9IHQucGFyZW50Tm9kZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGE7XHJcblx0XHRcdH0sXHJcblx0XHRcdGVlID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR2YXIgYSwgaTtcclxuXHRcdFx0XHR2YXIgdCA9IFtdO1xyXG5cdFx0XHRcdHZhciByID0gW107XHJcblx0XHRcdFx0dmFyIG4gPSB0O1xyXG5cdFx0XHRcdHZhciBzID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0dmFyIGUgPSBuO1xyXG5cdFx0XHRcdFx0biA9IHQubGVuZ3RoID8gciA6IHQ7XHJcblx0XHRcdFx0XHRhID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGkgPSBmYWxzZTtcclxuXHRcdFx0XHRcdHdoaWxlIChlLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRlLnNoaWZ0KCkoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGEgPSBmYWxzZTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHZhciBlID0gZnVuY3Rpb24gKGUsIHQpIHtcclxuXHRcdFx0XHRcdGlmIChhICYmICF0KSB7XHJcblx0XHRcdFx0XHRcdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG4ucHVzaChlKTtcclxuXHRcdFx0XHRcdFx0aWYgKCFpKSB7XHJcblx0XHRcdFx0XHRcdFx0aSA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0KEQuaGlkZGVuID8gSSA6IFUpKHMpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRlLl9sc0ZsdXNoID0gcztcclxuXHRcdFx0XHRyZXR1cm4gZTtcclxuXHRcdFx0fSkoKSxcclxuXHRcdFx0dGUgPSBmdW5jdGlvbiAoYSwgZSkge1xyXG5cdFx0XHRcdHJldHVybiBlXHJcblx0XHRcdFx0XHQ/IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHRlZShhKTtcclxuXHRcdFx0XHRcdCAgfVxyXG5cdFx0XHRcdFx0OiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGUgPSB0aGlzO1xyXG5cdFx0XHRcdFx0XHRcdHZhciB0ID0gYXJndW1lbnRzO1xyXG5cdFx0XHRcdFx0XHRcdGVlKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHRcdGEuYXBwbHkoZSwgdCk7XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHQgIH07XHJcblx0XHRcdH0sXHJcblx0XHRcdGFlID0gZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHR2YXIgYTtcclxuXHRcdFx0XHR2YXIgaSA9IDA7XHJcblx0XHRcdFx0dmFyIHIgPSBILnRocm90dGxlRGVsYXk7XHJcblx0XHRcdFx0dmFyIG4gPSBILnJpY1RpbWVvdXQ7XHJcblx0XHRcdFx0dmFyIHQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRhID0gZmFsc2U7XHJcblx0XHRcdFx0XHRpID0gZi5ub3coKTtcclxuXHRcdFx0XHRcdGUoKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHZhciBzID1cclxuXHRcdFx0XHRcdG8gJiYgbiA+IDQ5XHJcblx0XHRcdFx0XHRcdD8gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0byh0LCB7IHRpbWVvdXQ6IG4gfSk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAobiAhPT0gSC5yaWNUaW1lb3V0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdG4gPSBILnJpY1RpbWVvdXQ7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdCAgfVxyXG5cdFx0XHRcdFx0XHQ6IHRlKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHRcdEkodCk7XHJcblx0XHRcdFx0XHRcdCAgfSwgdHJ1ZSk7XHJcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0XHR2YXIgdDtcclxuXHRcdFx0XHRcdGlmICgoZSA9IGUgPT09IHRydWUpKSB7XHJcblx0XHRcdFx0XHRcdG4gPSAzMztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChhKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGEgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dCA9IHIgLSAoZi5ub3coKSAtIGkpO1xyXG5cdFx0XHRcdFx0aWYgKHQgPCAwKSB7XHJcblx0XHRcdFx0XHRcdHQgPSAwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKGUgfHwgdCA8IDkpIHtcclxuXHRcdFx0XHRcdFx0cygpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0SShzLCB0KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRpZSA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0dmFyIHQsIGE7XHJcblx0XHRcdFx0dmFyIGkgPSA5OTtcclxuXHRcdFx0XHR2YXIgciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdHQgPSBudWxsO1xyXG5cdFx0XHRcdFx0ZSgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0dmFyIG4gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHR2YXIgZSA9IGYubm93KCkgLSBhO1xyXG5cdFx0XHRcdFx0aWYgKGUgPCBpKSB7XHJcblx0XHRcdFx0XHRcdEkobiwgaSAtIGUpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0KG8gfHwgcikocik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0YSA9IGYubm93KCk7XHJcblx0XHRcdFx0XHRpZiAoIXQpIHtcclxuXHRcdFx0XHRcdFx0dCA9IEkobiwgaSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fSxcclxuXHRcdFx0ZSA9IChmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dmFyIHYsIG0sIGMsIGgsIGU7XHJcblx0XHRcdFx0dmFyIHksIHosIGcsIHAsIEMsIGIsIEE7XHJcblx0XHRcdFx0dmFyIG4gPSAvXmltZyQvaTtcclxuXHRcdFx0XHR2YXIgZCA9IC9eaWZyYW1lJC9pO1xyXG5cdFx0XHRcdHZhciBFID0gXCJvbnNjcm9sbFwiIGluIHUgJiYgIS8oZ2xlfGluZylib3QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcblx0XHRcdFx0dmFyIF8gPSAwO1xyXG5cdFx0XHRcdHZhciB3ID0gMDtcclxuXHRcdFx0XHR2YXIgTSA9IDA7XHJcblx0XHRcdFx0dmFyIE4gPSAtMTtcclxuXHRcdFx0XHR2YXIgTCA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0XHRNLS07XHJcblx0XHRcdFx0XHRpZiAoIWUgfHwgTSA8IDAgfHwgIWUudGFyZ2V0KSB7XHJcblx0XHRcdFx0XHRcdE0gPSAwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0dmFyIHggPSBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFx0aWYgKEEgPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRBID0gWihELmJvZHksIFwidmlzaWJpbGl0eVwiKSA9PSBcImhpZGRlblwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdFx0QSB8fFxyXG5cdFx0XHRcdFx0XHQhKFxyXG5cdFx0XHRcdFx0XHRcdFooZS5wYXJlbnROb2RlLCBcInZpc2liaWxpdHlcIikgPT0gXCJoaWRkZW5cIiAmJlxyXG5cdFx0XHRcdFx0XHRcdFooZSwgXCJ2aXNpYmlsaXR5XCIpID09IFwiaGlkZGVuXCJcclxuXHRcdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHZhciBXID0gZnVuY3Rpb24gKGUsIHQpIHtcclxuXHRcdFx0XHRcdHZhciBhO1xyXG5cdFx0XHRcdFx0dmFyIGkgPSBlO1xyXG5cdFx0XHRcdFx0dmFyIHIgPSB4KGUpO1xyXG5cdFx0XHRcdFx0ZyAtPSB0O1xyXG5cdFx0XHRcdFx0YiArPSB0O1xyXG5cdFx0XHRcdFx0cCAtPSB0O1xyXG5cdFx0XHRcdFx0QyArPSB0O1xyXG5cdFx0XHRcdFx0d2hpbGUgKHIgJiYgKGkgPSBpLm9mZnNldFBhcmVudCkgJiYgaSAhPSBELmJvZHkgJiYgaSAhPSBPKSB7XHJcblx0XHRcdFx0XHRcdHIgPSAoWihpLCBcIm9wYWNpdHlcIikgfHwgMSkgPiAwO1xyXG5cdFx0XHRcdFx0XHRpZiAociAmJiBaKGksIFwib3ZlcmZsb3dcIikgIT0gXCJ2aXNpYmxlXCIpIHtcclxuXHRcdFx0XHRcdFx0XHRhID0gaS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdFx0XHRcdFx0XHRyID1cclxuXHRcdFx0XHRcdFx0XHRcdEMgPiBhLmxlZnQgJiYgcCA8IGEucmlnaHQgJiYgYiA+IGEudG9wIC0gMSAmJiBnIDwgYS5ib3R0b20gKyAxO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gcjtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHZhciB0ID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0dmFyIGUsIHQsIGEsIGksIHIsIG4sIHMsIG8sIGwsIHUsIGYsIGM7XHJcblx0XHRcdFx0XHR2YXIgZCA9IGsuZWxlbWVudHM7XHJcblx0XHRcdFx0XHRpZiAoKGggPSBILmxvYWRNb2RlKSAmJiBNIDwgOCAmJiAoZSA9IGQubGVuZ3RoKSkge1xyXG5cdFx0XHRcdFx0XHR0ID0gMDtcclxuXHRcdFx0XHRcdFx0TisrO1xyXG5cdFx0XHRcdFx0XHRmb3IgKDsgdCA8IGU7IHQrKykge1xyXG5cdFx0XHRcdFx0XHRcdGlmICghZFt0XSB8fCBkW3RdLl9sYXp5UmFjZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmICghRSB8fCAoay5wcmVtYXR1cmVVbnZlaWwgJiYgay5wcmVtYXR1cmVVbnZlaWwoZFt0XSkpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRSKGRbdF0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmICghKG8gPSBkW3RdWyRdKFwiZGF0YS1leHBhbmRcIikpIHx8ICEobiA9IG8gKiAxKSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0biA9IHc7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmICghdSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dSA9XHJcblx0XHRcdFx0XHRcdFx0XHRcdCFILmV4cGFuZCB8fCBILmV4cGFuZCA8IDFcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHQ/IE8uY2xpZW50SGVpZ2h0ID4gNTAwICYmIE8uY2xpZW50V2lkdGggPiA1MDBcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdD8gNTAwXHJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQ6IDM3MFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdDogSC5leHBhbmQ7XHJcblx0XHRcdFx0XHRcdFx0XHRrLl9kZWZFeCA9IHU7XHJcblx0XHRcdFx0XHRcdFx0XHRmID0gdSAqIEguZXhwRmFjdG9yO1xyXG5cdFx0XHRcdFx0XHRcdFx0YyA9IEguaEZhYztcclxuXHRcdFx0XHRcdFx0XHRcdEEgPSBudWxsO1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHcgPCBmICYmIE0gPCAxICYmIE4gPiAyICYmIGggPiAyICYmICFELmhpZGRlbikge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR3ID0gZjtcclxuXHRcdFx0XHRcdFx0XHRcdFx0TiA9IDA7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGggPiAxICYmIE4gPiAxICYmIE0gPCA2KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHcgPSB1O1xyXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0dyA9IF87XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGlmIChsICE9PSBuKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR5ID0gaW5uZXJXaWR0aCArIG4gKiBjO1xyXG5cdFx0XHRcdFx0XHRcdFx0eiA9IGlubmVySGVpZ2h0ICsgbjtcclxuXHRcdFx0XHRcdFx0XHRcdHMgPSBuICogLTE7XHJcblx0XHRcdFx0XHRcdFx0XHRsID0gbjtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0YSA9IGRbdF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0XHRcdFx0XHRcdFx0aWYgKFxyXG5cdFx0XHRcdFx0XHRcdFx0KGIgPSBhLmJvdHRvbSkgPj0gcyAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0KGcgPSBhLnRvcCkgPD0geiAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0KEMgPSBhLnJpZ2h0KSA+PSBzICogYyAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0KHAgPSBhLmxlZnQpIDw9IHkgJiZcclxuXHRcdFx0XHRcdFx0XHRcdChiIHx8IEMgfHwgcCB8fCBnKSAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0KEgubG9hZEhpZGRlbiB8fCB4KGRbdF0pKSAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0KChtICYmIE0gPCAzICYmICFvICYmIChoIDwgMyB8fCBOIDwgNCkpIHx8IFcoZFt0XSwgbikpXHJcblx0XHRcdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRSKGRbdF0pO1xyXG5cdFx0XHRcdFx0XHRcdFx0ciA9IHRydWU7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoTSA+IDkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChcclxuXHRcdFx0XHRcdFx0XHRcdCFyICYmXHJcblx0XHRcdFx0XHRcdFx0XHRtICYmXHJcblx0XHRcdFx0XHRcdFx0XHQhaSAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0TSA8IDQgJiZcclxuXHRcdFx0XHRcdFx0XHRcdE4gPCA0ICYmXHJcblx0XHRcdFx0XHRcdFx0XHRoID4gMiAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0KHZbMF0gfHwgSC5wcmVsb2FkQWZ0ZXJMb2FkKSAmJlxyXG5cdFx0XHRcdFx0XHRcdFx0KHZbMF0gfHxcclxuXHRcdFx0XHRcdFx0XHRcdFx0KCFvICYmIChiIHx8IEMgfHwgcCB8fCBnIHx8IGRbdF1bJF0oSC5zaXplc0F0dHIpICE9IFwiYXV0b1wiKSkpXHJcblx0XHRcdFx0XHRcdFx0KSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpID0gdlswXSB8fCBkW3RdO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoaSAmJiAhcikge1xyXG5cdFx0XHRcdFx0XHRcdFIoaSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHZhciBhID0gYWUodCk7XHJcblx0XHRcdFx0dmFyIFMgPSBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFx0dmFyIHQgPSBlLnRhcmdldDtcclxuXHRcdFx0XHRcdGlmICh0Ll9sYXp5Q2FjaGUpIHtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIHQuX2xhenlDYWNoZTtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0TChlKTtcclxuXHRcdFx0XHRcdEsodCwgSC5sb2FkZWRDbGFzcyk7XHJcblx0XHRcdFx0XHRRKHQsIEgubG9hZGluZ0NsYXNzKTtcclxuXHRcdFx0XHRcdFYodCwgQik7XHJcblx0XHRcdFx0XHRYKHQsIFwibGF6eWxvYWRlZFwiKTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdHZhciBpID0gdGUoUyk7XHJcblx0XHRcdFx0dmFyIEIgPSBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFx0aSh7IHRhcmdldDogZS50YXJnZXQgfSk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHR2YXIgVCA9IGZ1bmN0aW9uIChlLCB0KSB7XHJcblx0XHRcdFx0XHR2YXIgYSA9IGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1sb2FkLW1vZGVcIikgfHwgSC5pZnJhbWVMb2FkTW9kZTtcclxuXHRcdFx0XHRcdGlmIChhID09IDApIHtcclxuXHRcdFx0XHRcdFx0ZS5jb250ZW50V2luZG93LmxvY2F0aW9uLnJlcGxhY2UodCk7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGEgPT0gMSkge1xyXG5cdFx0XHRcdFx0XHRlLnNyYyA9IHQ7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHR2YXIgRiA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0XHR2YXIgdDtcclxuXHRcdFx0XHRcdHZhciBhID0gZVskXShILnNyY3NldEF0dHIpO1xyXG5cdFx0XHRcdFx0aWYgKCh0ID0gSC5jdXN0b21NZWRpYVtlWyRdKFwiZGF0YS1tZWRpYVwiKSB8fCBlWyRdKFwibWVkaWFcIildKSkge1xyXG5cdFx0XHRcdFx0XHRlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIHQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKGEpIHtcclxuXHRcdFx0XHRcdFx0ZS5zZXRBdHRyaWJ1dGUoXCJzcmNzZXRcIiwgYSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHR2YXIgcyA9IHRlKGZ1bmN0aW9uICh0LCBlLCBhLCBpLCByKSB7XHJcblx0XHRcdFx0XHR2YXIgbiwgcywgbywgbCwgdSwgZjtcclxuXHRcdFx0XHRcdGlmICghKHUgPSBYKHQsIFwibGF6eWJlZm9yZXVudmVpbFwiLCBlKSkuZGVmYXVsdFByZXZlbnRlZCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoaSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChhKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRLKHQsIEguYXV0b3NpemVzQ2xhc3MpO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0LnNldEF0dHJpYnV0ZShcInNpemVzXCIsIGkpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRzID0gdFskXShILnNyY3NldEF0dHIpO1xyXG5cdFx0XHRcdFx0XHRuID0gdFskXShILnNyY0F0dHIpO1xyXG5cdFx0XHRcdFx0XHRpZiAocikge1xyXG5cdFx0XHRcdFx0XHRcdG8gPSB0LnBhcmVudE5vZGU7XHJcblx0XHRcdFx0XHRcdFx0bCA9IG8gJiYgai50ZXN0KG8ubm9kZU5hbWUgfHwgXCJcIik7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZiA9IGUuZmlyZXNMb2FkIHx8IChcInNyY1wiIGluIHQgJiYgKHMgfHwgbiB8fCBsKSk7XHJcblx0XHRcdFx0XHRcdHUgPSB7IHRhcmdldDogdCB9O1xyXG5cdFx0XHRcdFx0XHRLKHQsIEgubG9hZGluZ0NsYXNzKTtcclxuXHRcdFx0XHRcdFx0aWYgKGYpIHtcclxuXHRcdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQoYyk7XHJcblx0XHRcdFx0XHRcdFx0YyA9IEkoTCwgMjUwMCk7XHJcblx0XHRcdFx0XHRcdFx0Vih0LCBCLCB0cnVlKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAobCkge1xyXG5cdFx0XHRcdFx0XHRcdEcuY2FsbChvLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic291cmNlXCIpLCBGKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAocykge1xyXG5cdFx0XHRcdFx0XHRcdHQuc2V0QXR0cmlidXRlKFwic3Jjc2V0XCIsIHMpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKG4gJiYgIWwpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoZC50ZXN0KHQubm9kZU5hbWUpKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRUKHQsIG4pO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHR0LnNyYyA9IG47XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmIChyICYmIChzIHx8IGwpKSB7XHJcblx0XHRcdFx0XHRcdFx0WSh0LCB7IHNyYzogbiB9KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKHQuX2xhenlSYWNlKSB7XHJcblx0XHRcdFx0XHRcdGRlbGV0ZSB0Ll9sYXp5UmFjZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFEodCwgSC5sYXp5Q2xhc3MpO1xyXG5cdFx0XHRcdFx0ZWUoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgZSA9IHQuY29tcGxldGUgJiYgdC5uYXR1cmFsV2lkdGggPiAxO1xyXG5cdFx0XHRcdFx0XHRpZiAoIWYgfHwgZSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChlKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRLKHQsIEguZmFzdExvYWRlZENsYXNzKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Uyh1KTtcclxuXHRcdFx0XHRcdFx0XHR0Ll9sYXp5Q2FjaGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdEkoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKFwiX2xhenlDYWNoZVwiIGluIHQpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0ZGVsZXRlIHQuX2xhenlDYWNoZTtcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHR9LCA5KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAodC5sb2FkaW5nID09IFwibGF6eVwiKSB7XHJcblx0XHRcdFx0XHRcdFx0TS0tO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LCB0cnVlKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHR2YXIgUiA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0XHRpZiAoZS5fbGF6eVJhY2UpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dmFyIHQ7XHJcblx0XHRcdFx0XHR2YXIgYSA9IG4udGVzdChlLm5vZGVOYW1lKTtcclxuXHRcdFx0XHRcdHZhciBpID0gYSAmJiAoZVskXShILnNpemVzQXR0cikgfHwgZVskXShcInNpemVzXCIpKTtcclxuXHRcdFx0XHRcdHZhciByID0gaSA9PSBcImF1dG9cIjtcclxuXHRcdFx0XHRcdGlmIChcclxuXHRcdFx0XHRcdFx0KHIgfHwgIW0pICYmXHJcblx0XHRcdFx0XHRcdGEgJiZcclxuXHRcdFx0XHRcdFx0KGVbJF0oXCJzcmNcIikgfHwgZS5zcmNzZXQpICYmXHJcblx0XHRcdFx0XHRcdCFlLmNvbXBsZXRlICYmXHJcblx0XHRcdFx0XHRcdCFKKGUsIEguZXJyb3JDbGFzcykgJiZcclxuXHRcdFx0XHRcdFx0SihlLCBILmxhenlDbGFzcylcclxuXHRcdFx0XHRcdCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR0ID0gWChlLCBcImxhenl1bnZlaWxyZWFkXCIpLmRldGFpbDtcclxuXHRcdFx0XHRcdGlmIChyKSB7XHJcblx0XHRcdFx0XHRcdHJlLnVwZGF0ZUVsZW0oZSwgdHJ1ZSwgZS5vZmZzZXRXaWR0aCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlLl9sYXp5UmFjZSA9IHRydWU7XHJcblx0XHRcdFx0XHRNKys7XHJcblx0XHRcdFx0XHRzKGUsIHQsIHIsIGksIGEpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0dmFyIHIgPSBpZShmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRILmxvYWRNb2RlID0gMztcclxuXHRcdFx0XHRcdGEoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHR2YXIgbyA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdGlmIChILmxvYWRNb2RlID09IDMpIHtcclxuXHRcdFx0XHRcdFx0SC5sb2FkTW9kZSA9IDI7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyKCk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHR2YXIgbCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdGlmIChtKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChmLm5vdygpIC0gZSA8IDk5OSkge1xyXG5cdFx0XHRcdFx0XHRJKGwsIDk5OSk7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG0gPSB0cnVlO1xyXG5cdFx0XHRcdFx0SC5sb2FkTW9kZSA9IDM7XHJcblx0XHRcdFx0XHRhKCk7XHJcblx0XHRcdFx0XHRxKFwic2Nyb2xsXCIsIG8sIHRydWUpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdF86IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0ZSA9IGYubm93KCk7XHJcblx0XHRcdFx0XHRcdGsuZWxlbWVudHMgPSBELmdldEVsZW1lbnRzQnlDbGFzc05hbWUoSC5sYXp5Q2xhc3MpO1xyXG5cdFx0XHRcdFx0XHR2ID0gRC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKEgubGF6eUNsYXNzICsgXCIgXCIgKyBILnByZWxvYWRDbGFzcyk7XHJcblx0XHRcdFx0XHRcdHEoXCJzY3JvbGxcIiwgYSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdHEoXCJyZXNpemVcIiwgYSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdHEoXCJwYWdlc2hvd1wiLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChlLnBlcnNpc3RlZCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIHQgPSBELnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyBILmxvYWRpbmdDbGFzcyk7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAodC5sZW5ndGggJiYgdC5mb3JFYWNoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdFUoZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHQuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKGUuY29tcGxldGUpIHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0UihlKTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0aWYgKHUuTXV0YXRpb25PYnNlcnZlcikge1xyXG5cdFx0XHRcdFx0XHRcdG5ldyBNdXRhdGlvbk9ic2VydmVyKGEpLm9ic2VydmUoTywge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGRMaXN0OiB0cnVlLFxyXG5cdFx0XHRcdFx0XHRcdFx0c3VidHJlZTogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0XHRcdGF0dHJpYnV0ZXM6IHRydWUsXHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0T1tQXShcIkRPTU5vZGVJbnNlcnRlZFwiLCBhLCB0cnVlKTtcclxuXHRcdFx0XHRcdFx0XHRPW1BdKFwiRE9NQXR0ck1vZGlmaWVkXCIsIGEsIHRydWUpO1xyXG5cdFx0XHRcdFx0XHRcdHNldEludGVydmFsKGEsIDk5OSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cShcImhhc2hjaGFuZ2VcIiwgYSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdFtcclxuXHRcdFx0XHRcdFx0XHRcImZvY3VzXCIsXHJcblx0XHRcdFx0XHRcdFx0XCJtb3VzZW92ZXJcIixcclxuXHRcdFx0XHRcdFx0XHRcImNsaWNrXCIsXHJcblx0XHRcdFx0XHRcdFx0XCJsb2FkXCIsXHJcblx0XHRcdFx0XHRcdFx0XCJ0cmFuc2l0aW9uZW5kXCIsXHJcblx0XHRcdFx0XHRcdFx0XCJhbmltYXRpb25lbmRcIixcclxuXHRcdFx0XHRcdFx0XS5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0XHRcdFx0RFtQXShlLCBhLCB0cnVlKTtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdGlmICgvZCR8XmMvLnRlc3QoRC5yZWFkeVN0YXRlKSkge1xyXG5cdFx0XHRcdFx0XHRcdGwoKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRxKFwibG9hZFwiLCBsKTtcclxuXHRcdFx0XHRcdFx0XHREW1BdKFwiRE9NQ29udGVudExvYWRlZFwiLCBhKTtcclxuXHRcdFx0XHRcdFx0XHRJKGwsIDJlNCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKGsuZWxlbWVudHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdFx0dCgpO1xyXG5cdFx0XHRcdFx0XHRcdGVlLl9sc0ZsdXNoKCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0YSgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0Y2hlY2tFbGVtczogYSxcclxuXHRcdFx0XHRcdHVudmVpbDogUixcclxuXHRcdFx0XHRcdF9hTFNMOiBvLFxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0pKCksXHJcblx0XHRcdHJlID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHR2YXIgYTtcclxuXHRcdFx0XHR2YXIgbiA9IHRlKGZ1bmN0aW9uIChlLCB0LCBhLCBpKSB7XHJcblx0XHRcdFx0XHR2YXIgciwgbiwgcztcclxuXHRcdFx0XHRcdGUuX2xhenlzaXplc1dpZHRoID0gaTtcclxuXHRcdFx0XHRcdGkgKz0gXCJweFwiO1xyXG5cdFx0XHRcdFx0ZS5zZXRBdHRyaWJ1dGUoXCJzaXplc1wiLCBpKTtcclxuXHRcdFx0XHRcdGlmIChqLnRlc3QodC5ub2RlTmFtZSB8fCBcIlwiKSkge1xyXG5cdFx0XHRcdFx0XHRyID0gdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNvdXJjZVwiKTtcclxuXHRcdFx0XHRcdFx0Zm9yIChuID0gMCwgcyA9IHIubGVuZ3RoOyBuIDwgczsgbisrKSB7XHJcblx0XHRcdFx0XHRcdFx0cltuXS5zZXRBdHRyaWJ1dGUoXCJzaXplc1wiLCBpKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCFhLmRldGFpbC5kYXRhQXR0cikge1xyXG5cdFx0XHRcdFx0XHRZKGUsIGEuZGV0YWlsKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHR2YXIgaSA9IGZ1bmN0aW9uIChlLCB0LCBhKSB7XHJcblx0XHRcdFx0XHR2YXIgaTtcclxuXHRcdFx0XHRcdHZhciByID0gZS5wYXJlbnROb2RlO1xyXG5cdFx0XHRcdFx0aWYgKHIpIHtcclxuXHRcdFx0XHRcdFx0YSA9IHMoZSwgciwgYSk7XHJcblx0XHRcdFx0XHRcdGkgPSBYKGUsIFwibGF6eWJlZm9yZXNpemVzXCIsIHsgd2lkdGg6IGEsIGRhdGFBdHRyOiAhIXQgfSk7XHJcblx0XHRcdFx0XHRcdGlmICghaS5kZWZhdWx0UHJldmVudGVkKSB7XHJcblx0XHRcdFx0XHRcdFx0YSA9IGkuZGV0YWlsLndpZHRoO1xyXG5cdFx0XHRcdFx0XHRcdGlmIChhICYmIGEgIT09IGUuX2xhenlzaXplc1dpZHRoKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRuKGUsIHIsIGksIGEpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0dmFyIGUgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHR2YXIgZTtcclxuXHRcdFx0XHRcdHZhciB0ID0gYS5sZW5ndGg7XHJcblx0XHRcdFx0XHRpZiAodCkge1xyXG5cdFx0XHRcdFx0XHRlID0gMDtcclxuXHRcdFx0XHRcdFx0Zm9yICg7IGUgPCB0OyBlKyspIHtcclxuXHRcdFx0XHRcdFx0XHRpKGFbZV0pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHR2YXIgdCA9IGllKGUpO1xyXG5cdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRfOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdGEgPSBELmdldEVsZW1lbnRzQnlDbGFzc05hbWUoSC5hdXRvc2l6ZXNDbGFzcyk7XHJcblx0XHRcdFx0XHRcdHEoXCJyZXNpemVcIiwgdCk7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0Y2hlY2tFbGVtczogdCxcclxuXHRcdFx0XHRcdHVwZGF0ZUVsZW06IGksXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fSkoKSxcclxuXHRcdFx0dCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRpZiAoIXQuaSAmJiBELmdldEVsZW1lbnRzQnlDbGFzc05hbWUpIHtcclxuXHRcdFx0XHRcdHQuaSA9IHRydWU7XHJcblx0XHRcdFx0XHRyZS5fKCk7XHJcblx0XHRcdFx0XHRlLl8oKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRJKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRILmluaXQgJiYgdCgpO1xyXG5cdFx0XHR9KSxcclxuXHRcdFx0KGsgPSB7XHJcblx0XHRcdFx0Y2ZnOiBILFxyXG5cdFx0XHRcdGF1dG9TaXplcjogcmUsXHJcblx0XHRcdFx0bG9hZGVyOiBlLFxyXG5cdFx0XHRcdGluaXQ6IHQsXHJcblx0XHRcdFx0dVA6IFksXHJcblx0XHRcdFx0YUM6IEssXHJcblx0XHRcdFx0ckM6IFEsXHJcblx0XHRcdFx0aEM6IEosXHJcblx0XHRcdFx0ZmlyZTogWCxcclxuXHRcdFx0XHRnVzogcyxcclxuXHRcdFx0XHRyQUY6IGVlLFxyXG5cdFx0XHR9KVxyXG5cdFx0KTtcclxuXHR9KShlLCBlLmRvY3VtZW50LCBEYXRlKTtcclxuXHQoZS5sYXp5U2l6ZXMgPSB0KSxcclxuXHRcdFwib2JqZWN0XCIgPT0gdHlwZW9mIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cyAmJiAobW9kdWxlLmV4cG9ydHMgPSB0KTtcclxufSkoXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge30pO1xyXG4iXX0=
